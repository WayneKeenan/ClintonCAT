import React, {useEffect, useState} from "react";
import {createRoot} from "react-dom/client";
import "./popup.css";

const Popup: React.FC = () => {
    const [isEnabled, setIsEnabled] = useState(true)

    useEffect(() => {
        console.log('isEnabled:', isEnabled);
    }, [isEnabled]);

    const toggleEnabled = () => {
        setIsEnabled((prevState: boolean) => !prevState);
        console.log(isEnabled)

    };

    const openCATPage = () => {
        // TODO:
    };
    const openOpenOptionsPage = () => {
        chrome.runtime.openOptionsPage();
    };

    return (
        <div className="popup-container">
            <div className="top-banner flex">
                <h2>ClintonCAT</h2>
                <button className={`button-toggle ${isEnabled ? "toggle-on" : "toggle-off"}`}
                        onClick={() => toggleEnabled()}>
                    <span className="button-toggle-inner"></span>
                </button>
            </div>
            <div className="buttons">
                <button className="popup-button" onClick={() => openCATPage()}>
                    <svg width="26" height="20" viewBox="0 0 22 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M10.75 1.406C9.27004 1.406 9.12204 1.563 8.35604 1.563C7.71804 1.563 5.80204 0 4.84504 0C3.88804 0 2.77004 0.563 2.77004 2.188V4.063C2.77204 4.555 2.95004 6.063 3.65004 5.66C2.82304 6.638 2.74004 7.779 2.75104 8.883C2.52804 8.947 2.30104 9.02 2.08004 9.095C1.39604 9.329 0.670036 9.627 0.343036 9.839C0.175949 9.94694 0.0585864 10.1168 0.0167658 10.3113C-0.0250548 10.5058 0.0120924 10.7089 0.120035 10.876C0.227979 11.0431 0.397875 11.1604 0.592351 11.2023C0.786826 11.2441 0.989949 11.2069 1.15704 11.099C1.31304 10.998 1.87804 10.749 2.56504 10.514L2.79304 10.439C2.83904 10.872 2.95404 11.269 3.12504 11.629L3.10104 11.642C2.69104 11.858 2.31104 12.107 2.06904 12.265L1.95604 12.339C1.78895 12.4469 1.67159 12.6168 1.62977 12.8113C1.58795 13.0058 1.62509 13.2089 1.73304 13.376C1.84098 13.5431 2.01088 13.6604 2.20535 13.7023C2.39983 13.7441 2.60295 13.7069 2.77004 13.599L2.90104 13.513C3.14604 13.353 3.46004 13.148 3.80204 12.968C3.88204 12.9253 3.95904 12.8867 4.03304 12.852C5.76304 14.475 8.87004 15 10.75 15C12.63 15 15.737 14.475 17.467 12.852C17.5404 12.8867 17.6174 12.9253 17.698 12.968C18.04 13.148 18.354 13.353 18.599 13.513L18.73 13.599C18.8971 13.7069 19.1002 13.7441 19.2947 13.7023C19.4892 13.6604 19.6591 13.5431 19.767 13.376C19.875 13.2089 19.9121 13.0058 19.8703 12.8113C19.8285 12.6168 19.7111 12.4469 19.544 12.339L19.431 12.265C19.0969 12.0415 18.7525 11.8336 18.399 11.642L18.375 11.629C18.546 11.269 18.661 10.872 18.707 10.439L18.935 10.514C19.622 10.749 20.187 10.998 20.344 11.099C20.511 11.2009 20.7113 11.2335 20.902 11.1898C21.0927 11.1462 21.2588 11.0298 21.3648 10.8654C21.4709 10.701 21.5086 10.5017 21.4697 10.3099C21.4309 10.1182 21.3187 9.94918 21.157 9.839C20.83 9.627 20.104 9.329 19.421 9.095C19.1986 9.01907 18.9746 8.94806 18.749 8.882C18.761 7.778 18.677 6.638 17.849 5.66C18.549 6.063 18.729 4.555 18.73 4.062V2.188C18.73 0.563 17.613 0 16.655 0C15.698 0 13.782 1.563 13.145 1.563C12.378 1.563 12.23 1.406 10.75 1.406ZM10.075 10.6C10.277 10.531 10.516 10.5 10.75 10.5C10.984 10.5 11.223 10.531 11.426 10.6C11.526 10.634 11.646 10.688 11.754 10.774C11.828 10.8299 11.8885 10.9017 11.9311 10.9841C11.9737 11.0664 11.9972 11.1573 12 11.25C12 11.48 11.861 11.64 11.754 11.726C11.647 11.812 11.525 11.866 11.426 11.9C11.223 11.969 10.984 12 10.75 12C10.516 12 10.277 11.969 10.075 11.9C9.95628 11.8611 9.84502 11.8023 9.74604 11.726C9.67205 11.6701 9.61153 11.5983 9.56896 11.5159C9.52639 11.4336 9.50283 11.3427 9.50004 11.25C9.50004 11.02 9.63904 10.86 9.74604 10.774C9.85304 10.688 9.97604 10.634 10.075 10.6ZM12.92 7.5C13.057 7.272 13.326 7 13.73 7C14.134 7 14.404 7.272 14.54 7.5C14.682 7.739 14.75 8.027 14.75 8.313C14.75 8.599 14.682 8.886 14.54 9.124C14.404 9.353 14.134 9.625 13.73 9.625C13.326 9.625 13.057 9.353 12.92 9.125C12.7791 8.87782 12.7066 8.59752 12.71 8.313C12.71 8.027 12.778 7.739 12.92 7.501M6.96004 7.501C7.09704 7.273 7.36604 7.001 7.77004 7.001C8.17404 7.001 8.44404 7.273 8.58004 7.501C8.72204 7.74 8.79004 8.028 8.79004 8.314C8.79004 8.6 8.72204 8.887 8.58004 9.125C8.44404 9.354 8.17404 9.626 7.77004 9.626C7.36604 9.626 7.09704 9.354 6.96004 9.126C6.81908 8.87882 6.74659 8.59852 6.75004 8.314C6.75004 8.028 6.81804 7.739 6.96004 7.501Z" fill="currentColor"/>
                    </svg>
                </button>
                <button className="popup-button" onClick={() => openOpenOptionsPage()}>
                    <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path
                            d="M12.6473 2.08125C12.6741 2.19198 12.7267 2.29482 12.8007 2.3814C12.8748 2.46798 12.9682 2.53585 13.0735 2.57951C13.1787 2.62316 13.2928 2.64136 13.4064 2.63263C13.52 2.6239 13.6299 2.58848 13.7273 2.52925C16.1662 1.04425 18.9572 3.83425 17.4722 6.27325C17.413 6.37051 17.3776 6.48038 17.3688 6.59392C17.36 6.70746 17.3781 6.82148 17.4216 6.9267C17.4652 7.03192 17.533 7.12539 17.6194 7.19951C17.7059 7.27362 17.8086 7.3263 17.9193 7.35325C20.6943 8.02625 20.6943 11.9733 17.9193 12.6473C17.8085 12.6741 17.7057 12.7267 17.6191 12.8007C17.5325 12.8748 17.4646 12.9682 17.421 13.0735C17.3773 13.1787 17.3591 13.2928 17.3679 13.4064C17.3766 13.52 17.412 13.6299 17.4713 13.7273C18.9563 16.1662 16.1662 18.9572 13.7273 17.4722C13.63 17.413 13.5201 17.3776 13.4066 17.3688C13.293 17.36 13.179 17.3781 13.0738 17.4216C12.9686 17.4652 12.8751 17.533 12.801 17.6194C12.7269 17.7059 12.6742 17.8086 12.6473 17.9193C11.9743 20.6943 8.02725 20.6943 7.35325 17.9193C7.32642 17.8085 7.27384 17.7057 7.19977 17.6191C7.12571 17.5325 7.03226 17.4646 6.92702 17.421C6.82178 17.3773 6.70772 17.3591 6.59412 17.3679C6.48052 17.3766 6.37058 17.412 6.27325 17.4713C3.83425 18.9563 1.04325 16.1662 2.52825 13.7273C2.58748 13.63 2.62294 13.5201 2.63173 13.4066C2.64052 13.293 2.62241 13.179 2.57886 13.0738C2.5353 12.9686 2.46755 12.8751 2.38108 12.801C2.29462 12.7269 2.1919 12.6742 2.08125 12.6473C-0.69375 11.9743 -0.69375 8.02725 2.08125 7.35325C2.19198 7.32642 2.29482 7.27384 2.3814 7.19977C2.46798 7.12571 2.53585 7.03226 2.57951 6.92702C2.62316 6.82178 2.64136 6.70772 2.63263 6.59412C2.6239 6.48052 2.58848 6.37058 2.52925 6.27325C1.04425 3.83425 3.83425 1.04325 6.27325 2.52825C6.37042 2.58793 6.48033 2.62375 6.59401 2.63277C6.70768 2.64179 6.82187 2.62375 6.92723 2.58015C7.03259 2.53654 7.12613 2.46859 7.20018 2.38188C7.27423 2.29516 7.32668 2.19214 7.35325 2.08125C8.02625 -0.69375 11.9733 -0.69375 12.6473 2.08125ZM10.0002 7.00025C9.2046 7.00025 8.44154 7.31632 7.87893 7.87893C7.31632 8.44154 7.00025 9.2046 7.00025 10.0002C7.00025 10.7959 7.31632 11.559 7.87893 12.1216C8.44154 12.6842 9.2046 13.0002 10.0002 13.0002C10.7959 13.0002 11.559 12.6842 12.1216 12.1216C12.6842 11.559 13.0002 10.7959 13.0002 10.0002C13.0002 9.2046 12.6842 8.44154 12.1216 7.87893C11.559 7.31632 10.7959 7.00025 10.0002 7.00025Z"
                            fill="currentColor"/>
                    </svg>

                </button>
            </div>
        </div>
    );
};


const root = createRoot(document.getElementById("root")!);

root.render(
    <React.StrictMode>
        <Popup/>
    </React.StrictMode>
);